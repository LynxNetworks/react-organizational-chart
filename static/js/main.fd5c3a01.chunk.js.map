{"version":3,"sources":["../../src/components/TreeNode.tsx","../../src/components/Tree.tsx","StyledTreeExample.js","BasicTreeExample.js","index.js"],"names":["verticalLine","css","childrenContainer","node","nodeLines","TreeNode","children","jsx","className","label","React","count","Tree","lineHeight","lineWidth","lineColor","nodePadding","lineBorderRadius","StyledNode","StyledTreeExample","BasicTreeExample","title","rootElement","document","getElementById","ReactDOM","render","style","textAlign"],"mappings":"owDASA,IAAMA,EAAeC,iBAQfC,EAAoBD,gBAOpBD,GAOAG,EAAOF,iBASPG,EAAYH,gBAGZD,GAsCN,SAASK,SAAWC,aAClB,OACEC,kBAAIN,IAAK,CAACE,EAAMC,GAAYI,YAFKA,aAAPC,MAIvBC,WAAeC,MAAML,GAAY,GAChCC,kBAAIN,IAAKC,GAAoBI,6kBCtCrC,MAAeI,gBA/Cf,SAaSE,OACPN,aACAG,cACAI,wBAAa,aACbC,uBAAY,YACZC,uBAAY,cACZC,yBAAc,YACdC,8BAAmB,QAEnB,OACEV,kBACEN,IAAKA,gBAKcY,EACDC,EACAC,EACQE,EACND,IASpBT,YAACF,GAASI,MAAOA,GAAQH,O,qMCtC/B,SAASY,EAAT,GAAmC,IAAbZ,EAAY,EAAZA,SACpB,OACE,mBACEL,IAAKA,YAAF,MAOFK,GAKQ,SAASa,IACtB,OACE,YAAC,EAAD,CACEL,UAAW,MACXC,UAAW,QACXE,iBAAkB,OAClBR,MAAO,YAACS,EAAD,cAEP,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,iBACf,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,uBAEnB,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,iBACf,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,qBACf,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,8BACjB,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,gCAGrB,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,iBACf,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,wBACjB,YAAC,EAAD,CAAUT,MAAO,YAACS,EAAD,0BCpCV,SAASE,IACtB,OACE,kBAAC,EAAD,CAAMX,MAAO,sCACX,kBAAC,EAAD,CAAUA,MAAO,uCACf,kBAAC,EAAD,CAAUA,MAAO,+CAEnB,kBAAC,EAAD,CAAUA,MAAO,yCACf,kBAAC,EAAD,CAAUA,MAAO,gD,yICFzB,IAAMY,EAAQpB,YAAH,KAkBX,IAAMqB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,aAZhB,WACE,OACE,mBAAKC,MAAO,CAAEC,UAAW,WACvB,kBAAI3B,IAAKoB,GAAT,cACA,YAACD,EAAD,MACA,kBAAInB,IAAKoB,GAAT,eACA,YAACF,EAAD,SAMU,MAASG,I","file":"static/js/main.fd5c3a01.chunk.js","sourcesContent":["/** @jsx jsx */\nimport * as React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nexport type TreeNodeProps = React.PropsWithChildren<{\n  label: React.ReactNode;\n  className?: string;\n}>;\n\nconst verticalLine = css`\n  content: '';\n  position: absolute;\n  top: 0;\n  height: var(--tree-line-height);\n  box-sizing: border-box;\n`;\n\nconst childrenContainer = css`\n  display: flex;\n  padding-inline-start: 0;\n  padding-top: var(--tree-line-height);\n  position: relative;\n\n  ::before {\n    ${verticalLine};\n    left: 50%;\n    width: 0;\n    border-left: var(--tree-line-width) solid var(--tree-line-color);\n  }\n`;\n\nconst node = css`\n  flex: auto;\n  text-align: center;\n  list-style-type: none;\n  position: relative;\n  padding: var(--tree-line-height) var(--tree-node-padding) 0\n    var(--tree-node-padding);\n`;\n\nconst nodeLines = css`\n  ::before,\n  ::after {\n    ${verticalLine};\n    right: 50%;\n    width: 50%;\n    border-top: var(--tree-line-width) solid var(--tree-line-color);\n  }\n  ::after {\n    left: 50%;\n    border-left: var(--tree-line-width) solid var(--tree-line-color);\n  }\n\n  :only-of-type {\n    padding: 0;\n    ::after,\n    :before {\n      display: none;\n    }\n  }\n\n  :first-of-type {\n    ::before {\n      border: 0 none;\n    }\n    ::after {\n      border-radius: var(--tree-line-border-radius) 0 0 0;\n    }\n  }\n\n  :last-of-type {\n    ::before {\n      border-right: var(--tree-line-width) solid var(--tree-line-color);\n      border-radius: 0 var(--tree-line-border-radius) 0 0;\n    }\n    ::after {\n      border: 0 none;\n    }\n  }\n`;\n\nfunction TreeNode({ children, label, className }: TreeNodeProps) {\n  return (\n    <li css={[node, nodeLines]} className={className}>\n      {label}\n      {React.Children.count(children) > 0 && (\n        <ul css={childrenContainer}>{children}</ul>\n      )}\n    </li>\n  );\n}\n\nexport default TreeNode;\n","/** @jsx jsx */\nimport * as React from 'react';\nimport { css, jsx } from '@emotion/core';\n\nimport TreeNode, { TreeNodeProps } from './TreeNode';\nlet a = 1\ntype TreeProps = {\n  lineHeight?: string;\n  lineWidth?: string;\n  lineColor?: string;\n  lineBorderRadius?: string;\n  nodePadding?: string;\n};\n\nfunction Tree({\n  children,\n  label,\n  lineHeight = '20px',\n  lineWidth = '1px',\n  lineColor = 'black',\n  nodePadding = '5px',\n  lineBorderRadius = '5px',\n}: TreeProps & TreeNodeProps) {\n  return (\n    <ul\n      css={css`\n        padding-inline-start: 0;\n        margin: 0;\n        display: flex;\n\n        --line-height: ${lineHeight};\n        --line-width: ${lineWidth};\n        --line-color: ${lineColor};\n        --line-border-radius: ${lineBorderRadius};\n        --node-padding: ${nodePadding};\n\n        --tree-line-height: var(--line-height, 20px);\n        --tree-line-width: var(--line-width, 1px);\n        --tree-line-color: var(--line-color, black);\n        --tree-line-border-radius: var(--line-border-radius, 5px);\n        --tree-node-padding: var(--node-padding, 5px);\n      `}\n    >\n      <TreeNode label={label}>{children}</TreeNode>\n    </ul>\n  );\n}\n\nexport default React.memo(Tree);\n","/** @jsx jsx */\nimport React from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport { css, jsx } from '@emotion/core';\n\nfunction StyledNode({ children }) {\n  return (\n    <div\n      css={css`\n        padding: 5px;\n        border-radius: 8px;\n        display: inline-block;\n        border: 1px solid #ff0000;\n      `}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default function StyledTreeExample() {\n  return (\n    <Tree\n      lineWidth={'2px'}\n      lineColor={'green'}\n      lineBorderRadius={'10px'}\n      label={<StyledNode>Root</StyledNode>}\n    >\n      <TreeNode label={<StyledNode>Child 1</StyledNode>}>\n        <TreeNode label={<StyledNode>Grand Child</StyledNode>} />\n      </TreeNode>\n      <TreeNode label={<StyledNode>Child 2</StyledNode>}>\n        <TreeNode label={<StyledNode>Grand Child</StyledNode>}>\n          <TreeNode label={<StyledNode>Great Grand Child 1</StyledNode>} />\n          <TreeNode label={<StyledNode>Great Grand Child 2</StyledNode>} />\n        </TreeNode>\n      </TreeNode>\n      <TreeNode label={<StyledNode>Child 3</StyledNode>}>\n        <TreeNode label={<StyledNode>Grand Child 1</StyledNode>} />\n        <TreeNode label={<StyledNode>Grand Child 2</StyledNode>} />\n      </TreeNode>\n    </Tree>\n  );\n}\n","import React from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\n\nexport default function BasicTreeExample() {\n  return (\n    <Tree label={<div>Root</div>}>\n      <TreeNode label={<div>Child</div>}>\n        <TreeNode label={<div>Grand Child</div>} />\n      </TreeNode>\n      <TreeNode label={<div>Child 1</div>}>\n        <TreeNode label={<div>Grand Child</div>} />\n      </TreeNode>\n    </Tree>\n  );\n}\n","/** @jsx jsx */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { css, jsx } from '@emotion/core';\n\nimport StyledTreeExample from './StyledTreeExample';\nimport BasicTreeExample from './BasicTreeExample';\n\nconst title = css`\n  margin-top: 5rem;\n  :first-of-type {\n    margin-top: 0;\n  }\n`;\n\nfunction App() {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h2 css={title}>Basic tree</h2>\n      <BasicTreeExample />\n      <h2 css={title}>Styled tree</h2>\n      <StyledTreeExample />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}